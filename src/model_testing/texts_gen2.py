import g4f, time

g4f.logging = True  # enable logging
g4f.check_version = False  # Disable automatic version checking

# openai.api_key = "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"
topics = [
    "Фотография",
    "Архитектура",
    "Декоративно-прикладное искусство",
    "Костюмированное представление",
    "Классический танец",
    "Современный танец",
    "Фольклорный танец",
    "Модерн-джаз",
    "Балет",
    "Цирковое искусство",
    "Музыкальный театр",
    "Опера",
    "Балетное представление",
    "Мюзикл",
    "Камерная музыка",
    "Концертный зал",
    "Оркестр",
    "Хор",
    "Животноводство",
    "Рыболовство",
    "Охота",
    "Садоводство",
    "Огородничество",
    "Лесное хозяйство",
    "Пчеловодство",
    "Цветоводство",
    "Декоративное озеленение",
    "Грибоводство",
    "Косметический уход за кожей тела",
    "Уход за волосами",
    "Уход за ногтями",
    "Макияж",
    "Парфюмерия",
    "Пластическая хирургия",
    "Дерматология",
    "История кофе и кофейных напитков",
    "Кофейные рецепты и приготовление",
    "Лучшие кофейни и кафе в мире",
    "Кофейные традиции и культура разных стран",
    "Общественный транспорт в разных городах мира",
    "Новости и разработки в области транспорта",
    "Технологии в автомобильной промышленности",
    "Электромобили и экологический транспорт",
    "Моделирование и проектирование транспортных систем",
    "Вкусные рецепты на каждый день",
    "Приготовление блюд из разных кухонь мира",
    "Диетические блюда и здоровое питание",
    "Лучшие рестораны и кулинарные шоу",
    "Гастрономические маршруты и путешествия",
    "Вегетарианская кухня и растительное питание",
    "Здоровое питание для детей и подростков",
    "Популярные кулинарные тренды и новинки",
    "Разнообразные десерты и сладости",
    "Приготовление блюд на гриле и барбекю",
    "Лучшие рецепты для домашнего ужина",
    "Способы сохранения свежести продуктов",
    "Секреты приготовления блюд на скорую руку",
    "Рецепты напитков на основе фруктов и ягод",
    "Как правильно выбирать продукты в магазине",
    "Как готовить еду, используя только микроволновку",
    "Простые рецепты для начинающих кулинаров",
    "Как готовить еду на костре или костре во дворе",
    "Как правильно хранить продукты в холодильнике и морозилке",
    "Как готовить еду, используя только одну сковороду",
    "Как правильно составлять рацион питания для себя и своей семьи",
    "Как правильно выбирать продукты для детей и подростков",
    "Новые технологии в области производства продуктов питания",
    "Как правильно выбирать продукты для людей, занимающихся спортом или фитнесом",
    "Как правильно выбирать продукты для людей, желающих похудеть или сохранить форму",
    "Лучшие способы приготовления кофе дома"
]

used_topic = ["Спасение вымирающих видов", "Музыкальный театр", "Путешествия во времени и пространстве",
              "Фотография и видеосъемка", "Огородничество", "Инновации и стартапы",
              "Роль семьи в формировании личности",
              "Как правильно выбирать чайную посуду и аксессуары для заваривания чая", "Религиозные традиции и ритуалы",
              "Искусство и культура", "Здоровье и фитнес",
              'Путешествия и туризм', "Технологии и наука", "Мода и стиль", "Фотография", "Архитектура",
              "Декоративно-прикладное искусство", "Костюмированное представление",
              ]

for i in range(len(topics)):
    topic = topics[i]
    if topic in used_topic:
        continue
    prompt = f'составь небольшой текст на тему "{topic}"'
    go = 1

    try:
        response = g4f.ChatCompletion.create(
            model=g4f.models.gpt_4,
            messages=[{"role": "user", "content": prompt}],
        )
        response = str(response)
        with open('texts_gpt4.txt', 'a') as file:
            file.write(response)
        print(f'{topic}:\n{response}')
        used_topic.append(topic)
    except:
        new_prompt = f'составь небольшой текст по теме "{topic}"'
        time.sleep(30)
        try:
            response = g4f.ChatCompletion.create(
                model=g4f.models.gpt_4,
                messages=[{"role": "user", "content": prompt}],
            )
            response = str(response)
            with open('texts_gpt4.txt', 'a') as file:
                file.write(response)
            print(f'{topic}:\n{response}')
            used_topic.append(topic)
        except:
            continue
print("used:", used_topic)
unused = []
for i in topics:
    if i not in used_topic:
        unused.append(i)
print("unused:", unused)
